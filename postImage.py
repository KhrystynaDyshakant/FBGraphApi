import requests
from requests_toolbelt.multipart.encoder import MultipartEncoder

app_id = 'app_id'
app_secret = 'app_secret'
access_token = 'access_token'
page_id = 'page_id'

# Authenticate and get a long-lived user access token
def get_long_lived_token():
    url = f'https://graph.facebook.com/v12.0/oauth/access_token?' \
          f'grant_type=fb_exchange_token&' \
          f'client_id={app_id}&' \
          f'client_secret={app_secret}&' \
          f'fb_exchange_token={access_token}'

    response = requests.get(url)
    data = response.json()
    return data.get('access_token')

long_lived_token = get_long_lived_token()

additional_text = (
    'üè° –≤—É–ª. –ó–µ–ª–µ–Ω–∞, 115–∂\n'
    'üö™ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: 2\n'
    'üí∞ –¶—ñ–Ω–∞: 395USD\n'
    'üìù –û–ø–∏—Å: –ó–¥–∞—î—Ç—å—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –Ω–æ–≤–æ–±—É–¥–æ–≤—ñ 2 –∫—ñ–º–Ω–∞—Ç–∏, –∫—ñ–º–Ω–∞—Ç–∏ —ñ–∑–æ–ª—å–æ–≤–∞–Ω—ñ, –≤—Å—è –ø–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞, –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä, –∞–≤—Ç–æ–Ω–æ–º–Ω–µ –æ–ø–∞–ª–µ–Ω–Ω—è'
)

photo_paths = [
    'images/photo1.jpg',
    'images/photo2.jpg',
    'images/photo3.jpg',
    'images/photo4.jpg',
]

def create_facebook_post(token, text, photo_paths):
    url = f'https://graph.facebook.com/v12.0/{page_id}/photos'
    params = {'access_token': token}

    files = [('file{}'.format(i), ('photo{}.jpg'.format(i), open(photo_path, 'rb'), 'image/jpeg')) for i, photo_path in enumerate(photo_paths, start=1)]

    data = {
        'message': text,
        'published': 'true',
        'no_story': 'false',
    }

    fields = {}
    for key, value in data.items():
        fields[key] = (None, value)

    for key, (filename, file, content_type) in files:
        fields[key] = (filename, file, content_type)

    encoder = MultipartEncoder(fields=fields)
    headers = {'Content-Type': encoder.content_type}

    response = requests.post(url, params=params, data=encoder, headers=headers)

    if response.status_code == 200:
        print('–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')
    else:
        print(f'–ü–æ–º–∏–ª–∫–∞: {response.status_code}, {response.text}')

create_facebook_post(long_lived_token, additional_text, photo_paths)